/*
Reverse Alternate K Nodes

Given a linked list A of length N and an integer B.
You need to reverse every alternate B nodes in the linked list A.

N is divisible by B
Input Format
First argument is the head pointer of the linkedlist A.
Second argument is an integer B.

Output Format
Return the head pointer of the final linkedlist as described.
Example Input
Input 1:
 A = 3 -> 4 -> 7 -> 5 -> 6 -> 6 -> 15 -> 61 -> 16
 B = 3
 Input 2:
 A = 1 -> 4 -> 6 -> 6 -> 4 -> 10
 B = 2
Example Output
Output 1:
 7 -> 4 -> 3 -> 5 -> 6 -> 6 -> 16 -> 61 -> 15
Output 2:
4 -> 1 -> 6 -> 6 -> 10 -> 4

*/


/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
   public ListNode solve(ListNode A, int B) {
         if(A==null) return A;
         
         ListNode curr=A;
         int count=B;
         
         while(curr!=null && --count>0) curr=curr.next;
         if(curr==null) return A;
         
         ListNode noChangeList=curr.next;
         curr.next=null;
         
         ListNode reversedOne=reverse(A);
         A.next=noChangeList;
         
         curr=noChangeList;
         count=B;
         
         while(curr!=null && --count>0) curr=curr.next;
         
         if(curr==null) return reversedOne;
         curr.next=solve(curr.next,B);
         
         return reversedOne;
    }
    
    public ListNode reverse(ListNode head){
        ListNode prev=null;
        while(head!=null){
            ListNode curr=head.next;
            head.next=prev;
            prev=head;
            head=curr;
        }
        return prev;
    }
}
