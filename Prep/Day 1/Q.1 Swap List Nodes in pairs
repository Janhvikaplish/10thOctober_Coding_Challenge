/*
Swap List Nodes in pairs
Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.
Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.
*/

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode swapPairs(ListNode A) {
       if(A==null || A.next==null)
       return A;
       ListNode head = A;
       ListNode curr = A;
       while(curr!=null && curr.next!=null){
           int temp = curr.val;
           curr.val=curr.next.val;
           curr.next.val=temp;
           curr=curr.next.next;
       }
       return head;

    }
}
