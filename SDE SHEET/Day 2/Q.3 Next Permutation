/*
31. Next Permutation
Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.
If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).
The replacement must be in place and use only constant extra memory.

Example 1:
Input: nums = [1,2,3]
Output: [1,3,2]
*/

class Solution {
    public void nextPermutation(int[] A) {
        if(A == null || A.length == 1)
            return;
        // running a loop and finding the break point 1 3 5 4 2
        // 3 is the break point
        int i=A.length-2;
        while(i>=0 && A[i]>=A[i+1])i--;
        int j;
        if(i>=0){
            j=A.length-1;
            // finding the number just grater than the break point
            // i.e 4 which is greater than 3
            while(A[j]<=A[i])j--;
            // swapping 3 and 4
            int temp=A[i];
            A[i]=A[j];
            A[j]=temp;
        }
        
        // reversing the array elements i.e 1 4 5 3 2 from 5 to 2
        i=i+1;
        j=A.length-1;
        while(i<j){
            int temp=A[i];
            A[i]=A[j];
            A[j]=temp;
            i++;
            j--;
        }
            
    }
}
