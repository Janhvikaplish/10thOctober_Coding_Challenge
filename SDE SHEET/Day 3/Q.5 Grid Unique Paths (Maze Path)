/*
62. Unique Paths

A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).
The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).
How many possible unique paths are there?

Example 1:
Input: m = 3, n = 7
Output: 28

Example 2:
Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down
*/

class Solution {
   public int uniquePaths(int m, int n) {
        // m -> row
        // n -> column
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = -1;
            }
        }        
        
        int result = uniquePath(0,0,m,n,dp);
        return result;
    }
    
    public int uniquePath(int i, int j, int m, int n, int[][] dp) {
        if (i == (m-1) && j == (n - 1)) {
            return 1;
        }
        if (i >= m || j >= n) {
            return 0;
        } 
        
        if (dp[i][j] != -1) {
            return dp[i][j];
        } else {
            return dp[i][j] = uniquePath(i+1,j,m,n,dp) + uniquePath(i,j+1,m,n,dp);
        }
    }
}
