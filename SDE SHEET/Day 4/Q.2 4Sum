/*
18. 4Sum

Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:
0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

Example 1:
Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
*/

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        
        List<List<Integer>> ans=new ArrayList<>();
        Arrays.sort(nums);
        int n=nums.length;
            for(int i=0;i<n;i++){
                for(int j=i+1;j<n;j++){
                    int front= j+1;
                    int back= n-1;
                    int target2=target-(nums[i]+nums[j]);
                    
                    while(front<back){
                        int sum=nums[front]+nums[back];
                        if(sum<target2)
                            front++;
                        else if(sum>target2)
                            back--;
                        else{
                            List<Integer> quad = new ArrayList<>();
                            quad.add(nums[i]);
                            quad.add(nums[j]);
                            quad.add(nums[front]);
                            quad.add(nums[back]);
                            if(!ans.contains(quad))
                            ans.add(quad);
                            
                            while(front<back && nums[front]==quad.get(2))
                                front++;
                            while(front<back && nums[back]==quad.get(3))
                                back--;
                        }
                    }
                }
            }
        return ans;
    }
}
